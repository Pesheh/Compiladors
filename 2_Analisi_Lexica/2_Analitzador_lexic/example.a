-- A lexical scanner generated by aflex
with text_io; use text_io;
with example_dfa; use example_dfa; 
with example_io; use example_io; 
--# line 1 "example.l"
--# line 6 "example.l"


	with d_token,a_lexic; use d_token,a_lexic;
	WITH Example_io,Example_dfa;Use Example_io,Example_dfa;
package body a_lexic is
        procedure open(name: in String) is
        begin
                Open_Input(name);
        end open;

        procedure close is
        begin
                Close_Input;
        end close;
function YYLex return Token is
subtype short is integer range -32768..32767;
    yy_act : integer;
    yy_c : short;

-- returned upon end-of-file
YY_END_TOK : constant integer := 0;
YY_END_OF_BUFFER : constant := 23;
subtype yy_state_type is integer;
yy_current_state : yy_state_type;
INITIAL : constant := 0;
yy_accept : constant array(0..56) of short :=
    (   0,
       21,   21,   23,   21,    1,   21,   15,   13,   14,   16,
       18,    5,    6,    8,   12,    9,   21,   21,   21,   21,
       21,   21,    0,   19,   21,   18,   21,    7,   10,   11,
       17,   17,   17,    3,   19,   21,   21,   20,   20,   18,
       21,   17,   17,    0,   18,   21,   17,   17,   18,   17,
        4,   17,   17,   17,    2,    0
    ) ;

yy_ec : constant array(ASCII.NUL..ASCII.DEL) of short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    1,    7,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   12,
       13,   14,    1,    1,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   16,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
        1,    1,    1,    1,   17,    1,   18,   19,   20,   21,

       22,   18,   23,   18,   24,   18,   18,   18,   18,   25,
       26,   18,   18,   27,   28,   18,   29,   18,   18,   18,
       18,   18,    1,    1,    1,    1,    1
    ) ;

yy_meta : constant array(0..29) of short :=
    (   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    ) ;

yy_base : constant array(0..60) of short :=
    (   0,
        0,    0,  114,    0,  115,   28,    0,    0,  107,    0,
       24,   99,    0,   98,    0,   97,   41,   82,   86,   79,
        0,   32,  103,  102,   34,   63,   30,    0,    0,    0,
        0,   78,   80,    0,   99,   71,   73,  115,    0,   69,
       73,   81,   76,   96,   75,   79,   76,   72,   79,   74,
        0,   56,   52,   21,    0,  115,   39,   88,   90,   92
    ) ;

yy_def : constant array(0..60) of short :=
    (   0,
       56,    1,   56,   57,   56,   58,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   56,   17,   17,   17,
       57,   58,   59,   57,   60,   57,   57,   57,   57,   57,
       17,   17,   17,   17,   56,   58,   60,   56,   57,   57,
       57,   17,   17,   59,   57,   57,   17,   17,   57,   17,
       17,   17,   17,   17,   17,    0,   56,   56,   56,   56
    ) ;

yy_nxt : constant array(0..144) of short :=
    (   0,
        4,    5,    6,    7,    8,    9,   10,    4,   11,   12,
       13,   14,   15,   16,   17,   18,    4,   17,   19,   17,
       17,   17,   17,   20,   17,   17,   17,   17,   17,   23,
       24,   26,   26,   23,   24,   38,   39,   41,   41,   21,
       27,   21,   55,   21,   21,   21,   21,   21,   31,   31,
       21,   21,   21,   21,   21,   31,   31,   21,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       40,   40,   23,   24,   38,   39,   45,   45,   54,   27,
       46,   46,   45,   45,   53,   27,   49,   49,   22,   22,
       23,   23,   37,   37,   52,   27,   51,   50,   35,   48,

       47,   44,   43,   42,   36,   35,   34,   33,   32,   30,
       29,   28,   25,   56,    3,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56
    ) ;

yy_chk : constant array(0..144) of short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    6,
        6,   11,   11,   22,   22,   25,   25,   27,   27,   57,
       11,   17,   54,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       26,   26,   36,   36,   37,   37,   40,   40,   53,   26,
       41,   41,   45,   45,   52,   40,   46,   46,   58,   58,
       59,   59,   60,   60,   50,   49,   48,   47,   44,   43,

       42,   35,   33,   32,   24,   23,   20,   19,   18,   16,
       14,   12,    9,    3,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56
    ) ;


-- copy whatever the last rule matched to the standard output

procedure ECHO is
begin
   if (text_io.is_open(user_output_file)) then
     text_io.put( user_output_file, yytext );
   else
     text_io.put( yytext );
   end if;
end ECHO;

-- enter a start condition.
-- Using procedure requires a () after the ENTER, but makes everything
-- much neater.

procedure ENTER( state : integer ) is
begin
     yy_start := 1 + 2 * state;
end ENTER;

-- action number for EOF rule of a given start state
function YY_STATE_EOF(state : integer) return integer is
begin
     return YY_END_OF_BUFFER + state + 1;
end YY_STATE_EOF;

-- return all but the first 'n' matched characters back to the input stream
procedure yyless(n : integer) is
begin
        yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
        yy_cp := yy_bp + n;
        yy_c_buf_p := yy_cp;
        YY_DO_BEFORE_ACTION; -- set up yytext again
end yyless;

-- redefine this if you have something you want each time.
procedure YY_USER_ACTION is
begin
        null;
end;

-- yy_get_previous_state - get the state just before the EOB char was reached

function yy_get_previous_state return yy_state_type is
    yy_current_state : yy_state_type;
    yy_c : short;
begin
    yy_current_state := yy_start;

    for yy_cp in yytext_ptr..yy_c_buf_p - 1 loop
	yy_c := yy_ec(yy_ch_buf(yy_cp));
	if ( yy_accept(yy_current_state) /= 0 ) then
	    yy_last_accepting_state := yy_current_state;
	    yy_last_accepting_cpos := yy_cp;
	end if;
	while ( yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state ) loop
	    yy_current_state := yy_def(yy_current_state);
	    if ( yy_current_state >= 57 ) then
		yy_c := yy_meta(yy_c);
	    end if;
	end loop;
	yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
    end loop;

    return yy_current_state;
end yy_get_previous_state;

procedure yyrestart( input_file : file_type ) is
begin
   open_input(text_io.name(input_file));
end yyrestart;

begin -- of YYLex
<<new_file>>
        -- this is where we enter upon encountering an end-of-file and
        -- yywrap() indicating that we should continue processing

    if ( yy_init ) then
        if ( yy_start = 0 ) then
            yy_start := 1;      -- first start state
        end if;

        -- we put in the '\n' and start reading from [1] so that an
        -- initial match-at-newline will be true.

        yy_ch_buf(0) := ASCII.LF;
        yy_n_chars := 1;

        -- we always need two end-of-buffer characters. The first causes
        -- a transition to the end-of-buffer state. The second causes
        -- a jam in that state.

        yy_ch_buf(yy_n_chars) := YY_END_OF_BUFFER_CHAR;
        yy_ch_buf(yy_n_chars + 1) := YY_END_OF_BUFFER_CHAR;

        yy_eof_has_been_seen := false;

        yytext_ptr := 1;
        yy_c_buf_p := yytext_ptr;
        yy_hold_char := yy_ch_buf(yy_c_buf_p);
        yy_init := false;
-- UMASS CODES :
--   Initialization
        tok_begin_line := 1;
        tok_end_line := 1;
        tok_begin_col := 0;
        tok_end_col := 0;
        token_at_end_of_line := false;
        line_number_of_saved_tok_line1 := 0;
        line_number_of_saved_tok_line2 := 0;
-- END OF UMASS CODES.
    end if; -- yy_init

    loop                -- loops until end-of-file is reached

-- UMASS CODES :
--    if last matched token is end_of_line, we must
--    update the token_end_line and reset tok_end_col.
    if Token_At_End_Of_Line then
      Tok_End_Line := Tok_End_Line + 1;
      Tok_End_Col := 0;
      Token_At_End_Of_Line := False;
    end if;
-- END OF UMASS CODES.

        yy_cp := yy_c_buf_p;

        -- support of yytext
        yy_ch_buf(yy_cp) := yy_hold_char;

        -- yy_bp points to the position in yy_ch_buf of the start of the
        -- current run.
	yy_bp := yy_cp;
	yy_current_state := yy_start;
	loop
		yy_c := yy_ec(yy_ch_buf(yy_cp));
		if ( yy_accept(yy_current_state) /= 0 ) then
		    yy_last_accepting_state := yy_current_state;
		    yy_last_accepting_cpos := yy_cp;
		end if;
		while ( yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state ) loop
		    yy_current_state := yy_def(yy_current_state);
		    if ( yy_current_state >= 57 ) then
			yy_c := yy_meta(yy_c);
		    end if;
		end loop;
		yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
	    yy_cp := yy_cp + 1;
if ( yy_current_state = 56 ) then
    exit;
end if;
	end loop;
	yy_cp := yy_last_accepting_cpos;
	yy_current_state := yy_last_accepting_state;

<<next_action>>
	    yy_act := yy_accept(yy_current_state);
            YY_DO_BEFORE_ACTION;
            YY_USER_ACTION;

        if aflex_debug then  -- output acceptance info. for (-d) debug mode
            text_io.put( Standard_Error, "--accepting rule #" );
            text_io.put( Standard_Error, INTEGER'IMAGE(yy_act) );
            text_io.put_line( Standard_Error, "(""" & yytext & """)");
        end if;

-- UMASS CODES :
--   Update tok_begin_line, tok_end_line, tok_begin_col and tok_end_col
--   after matching the token.
        if yy_act /= YY_END_OF_BUFFER and then yy_act /= 0 then
-- Token are matched only when yy_act is not yy_end_of_buffer or 0.
          Tok_Begin_Line := Tok_End_Line;
          Tok_Begin_Col := Tok_End_Col + 1;
          Tok_End_Col := Tok_Begin_Col + yy_cp - yy_bp - 1;
          if yy_ch_buf ( yy_bp ) = ASCII.LF then
            Token_At_End_Of_Line := True;
          end if;
        end if;
-- END OF UMASS CODES.

<<do_action>>   -- this label is used only to access EOF actions
            case yy_act is
		when 0 => -- must backtrack
		-- undo the effects of YY_DO_BEFORE_ACTION
		yy_ch_buf(yy_cp) := yy_hold_char;
		yy_cp := yy_last_accepting_cpos;
		yy_current_state := yy_last_accepting_state;
		goto next_action;



when 1 => 
--# line 8 "example.l"
null;

when 2 => 
--# line 9 "example.l"
TEXT_IO.PUT_LINE("PROCEDURE"); RETURN PC_procedure;

when 3 => 
--# line 10 "example.l"
TEXT_IO.PUT_LINE("IS"); RETURN PC_is;

when 4 => 
--# line 11 "example.l"
TEXT_IO.PUT_LINE("BEGIN"); RETURN PC_begin;

when 5 => 
--# line 12 "example.l"
TEXT_IO.PUT_LINE("COLON"); RETURN Colon;

when 6 => 
--# line 13 "example.l"
TEXT_IO.PUT_LINE("SEMICOLON"); RETURN Semicolon;

when 7 => 
--# line 14 "example.l"
TEXT_IO.PUT_LINE("ASSIGNATION"); RETURN Assignation;

when 8 => 
--# line 15 "example.l"
TEXT_IO.PUT_LINE("LESS"); RETURN Less;

when 9 => 
--# line 16 "example.l"
TEXT_IO.PUT_LINE("MORE"); RETURN More;

when 10 => 
--# line 17 "example.l"
TEXT_IO.PUT_LINE("LESS OR EQUAL"); RETURN Less_or_equal;

when 11 => 
--# line 18 "example.l"
TEXT_IO.PUT_LINE("MORE OR EQUAL"); RETURN More_or_equal;

when 12 => 
--# line 19 "example.l"
TEXT_IO.PUT_LINE("EQUAL"); RETURN Equal;

when 13 => 
--# line 20 "example.l"
TEXT_IO.PUT_LINE("ADDITION"); RETURN Addition;

when 14 => 
--# line 21 "example.l"
TEXT_IO.PUT_LINE("SUBSTRACTION"); RETURN Substraction;

when 15 => 
--# line 22 "example.l"
TEXT_IO.PUT_LINE("MULTIPLICATION"); RETURN Multiplication;

when 16 => 
--# line 23 "example.l"
TEXT_IO.PUT_LINE("DIVISION"); RETURN Division;

when 17 => 
--# line 24 "example.l"
TEXT_IO.PUT_LINE("IDENTIFIER"); RETURN Identifier;

when 18 => 
--# line 25 "example.l"
TEXT_IO.PUT_LINE("INTEGER"); RETURN Number;

when 19 => 
--# line 26 "example.l"
TEXT_IO.PUT_LINE("STRING"); RETURN Str;

when 20 => 
--# line 27 "example.l"
TEXT_IO.PUT_LINE("COMMENT"); RETURN Comment;

when 21 => 
--# line 28 "example.l"
TEXT_IO.PUT_LINE("ERROR"); RETURN Error;						

when 22 => 
--# line 30 "example.l"
ECHO;
when YY_END_OF_BUFFER + INITIAL + 1 => 
    return End_Of_Input;
                when YY_END_OF_BUFFER =>
                    -- undo the effects of YY_DO_BEFORE_ACTION
                    yy_ch_buf(yy_cp) := yy_hold_char;

                    yytext_ptr := yy_bp;

                    case yy_get_next_buffer is
                        when EOB_ACT_END_OF_FILE =>
                            begin
                            if ( yywrap ) then
                                -- note: because we've taken care in
                                -- yy_get_next_buffer() to have set up yytext,
                                -- we can now set up yy_c_buf_p so that if some
                                -- total hoser (like aflex itself) wants
                                -- to call the scanner after we return the
                                -- End_Of_Input, it'll still work - another
                                -- End_Of_Input will get returned.

                                yy_c_buf_p := yytext_ptr;

                                yy_act := YY_STATE_EOF((yy_start - 1) / 2);

                                goto do_action;
                            else
                                --  start processing a new file
                                yy_init := true;
                                goto new_file;
                            end if;
                            end;
                        when EOB_ACT_RESTART_SCAN =>
                            yy_c_buf_p := yytext_ptr;
                            yy_hold_char := yy_ch_buf(yy_c_buf_p);
                        when EOB_ACT_LAST_MATCH =>
                            yy_c_buf_p := yy_n_chars;
                            yy_current_state := yy_get_previous_state;

                            yy_cp := yy_c_buf_p;
                            yy_bp := yytext_ptr;
                            goto next_action;
                        when others => null;
                        end case; -- case yy_get_next_buffer()
                when others =>
                    text_io.put( "action # " );
                    text_io.put( INTEGER'IMAGE(yy_act) );
                    text_io.new_line;
                    raise AFLEX_INTERNAL_ERROR;
            end case; -- case (yy_act)
        end loop; -- end of loop waiting for end of file
end YYLex;
--# line 30 "example.l"
end a_lexic;

