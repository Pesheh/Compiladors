Ada:
	- ___: integer;
	- ___: character;
	- ___: boolean;
	- ___: access _TYPE_;

	- type ___ is [record][new][access] ______ [end record];
	- ___: array ( _RANGE_) of _TYPE_;
	- _ACCESS_TYPE_.all-> 	access to the variables pointed byt the access type.
	
	- if ___ then ___ end if;
	- case ___ is
		when ___ => ; ...when ___ => ;
	  end case;
	- while ___ loop ___ end loop;
	- exception
		when ___ => ; ... when => ;
	
	- procedure ___ ( ___ : [in] [out] ___ ...) is
		...
	  begin
		...
	  end ____;
	- function ___ ( ___: [in] [out] ___ ...) return ___ is
		...
	  begin
		...
		return ____;
	  end ____;
	
	- ___ and [then] ___
	- ___ or ___

	Alpha= { '(', ')', '+', '*', '-', '/','%',':',';','"',''','=','>', '<','<=','>=','/=',':=','--',A-Z,a-z,0-9,'.',',','\n','\0'...
	T={while,loop, end loop, if, then, end if,else, elsif, is, array,range,of, type,new,record, end record,and, or,procedure,begin,end,
	 in, out, return, function}
	


	<init> ->	 <initf>|<initproc>
	<initproc> ->	procedure <indentif_p> <args> <block_proc> //los args no son parte del indentificador?
	<block_proc> ->	<declar> begin <block_i> end <identif_proc>;
	<block_i> ->	while <cond> loop <block_i2> end loop;|
			if <cond> then <block_i2> end if; |
			if <cond> then <block_i2> else <block_i2> end if;
			<identif>:= <terme>;<block_i2>|
			<identif>:= <terme>;|
			 null;
	
	<initf> ->	function <identif_p> <args> return <terme> <block_fun>
	<block_fun> ->	<declar> begin <block_i> return <terme>; end <identif_fun>;

	<block_i2> ->	block_i|lambda
	
	<declar> ->	<init>| <identif>:<Type>; <declar>|<declar2>,<identif>:<Type>;<declar>|
			type <identif> is <declar_t>; <declar>| <identif>: array (...) of <Type>;<declar>;|lambda
			
	<cond> ->	(<expr>)|<expr>
	<expr> ->	<term> and <cond> | <term> and then <cond> | <term> or <cond> | <term>
	
	<Type> ->	integer|character|boolean
	
	<args> ->	<identif>: <I_O> <Type>| <args_i>
	<args_i> ->	<identif>: <I_O> <Type>;<args>

	

	<identif> ->	<char_id>
	<char_id> ->	(a..z)(A..Z)|<dig_id>
	<dig_id> ->	0..9|<char_id>| lambda

